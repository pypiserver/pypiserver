#! /bin/sh
#
# Author: Low Kian Seong
#
# /etc/init.d/pypiserver
#
#   and symbolic its link
#
#
### BEGIN INIT INFO
# Provides: pypiserver
# Required-Start: 
# Required-Stop: 
# Should-Start: 
# Should-Stop: 

# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Short-Description: Daemonized version of deluge.
# Description:       Starts the pypiserver daemon.
### END INIT INFO

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="pypiserver"
NAME=pypiserver
VERBOSE=""

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

DAEMON=${PYPISERVER_VIRTUALENV}/bin/pypi-server
DAEMON_ARGS="-i ${PYPISERVER_HOST} -p ${PYPISERVER_PORT} ${PYPISERVER_OPTS} ${PYPISERVER_PACKAGES}"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
    if [ -f "$PIDFILE" ]; then
        log_daemon_msg "Found existing PID file. NOT starting" "$NAME"
    else
	    startproc -p $PIDFILE \
            $DAEMON $DAEMON_ARGS > /dev/null || return 2
    fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	killproc -TERM $DAEMON 
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE
	return 0
}

case "$1" in
  start)
	rc_status -v
	do_start
	case "$?" in
		0|1) rc_status -v;;
		2) rc_status -v;;
	esac
	;;
  stop)
	rc_status -v
	do_stop
	case "$?" in
		0|1) rc_status -v;;
		2)rc_status -v;;
	esac
	;;
  status)
       check_proc "$DAEMON"
       rc_status -v
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	rc_status -v 
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) rc_status -v ;;
			1) rc_status -v ;; # Old process is still running
			*) rc_status -v ;; # Failed to start
		esac
		;;
	  *)
        # Failed to stop
		rc_status -v
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
